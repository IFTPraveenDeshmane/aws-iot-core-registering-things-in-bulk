{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Smart Waste Management System COnventional waste collections are complicated and costly. A fleet of trucks drive along busy streets on an arbitrary schedula using inefficient routes. Wiht no data, collections are based on a lot of speculations. At any given time waste bins vary in fill levels. IoT sensors can be retrofitted to existing bins of any size and shape with ability to detect solid or liquid substances. Once installed, sensors communicate to online platform where fill levels can be monitored on visual graphs and collection routes are optimzed. By implementing smart solutions in waste management systes, pickup points are minimized so fewer vehicles are dispatched resulting in less trafic noise, congestion and CO2 emission. Optimized routes can be updated on the drivers app whenever new data is retriveved. Drivers follow the deisgnated route and empty bins that have been highlighted. With this solution, less time , less trucks and less fuel will be nedeed for the operations resolving a saving up to 80 percent. Ecube Labs mkdocs example","title":"Home"},{"location":"#smart-waste-management-system","text":"COnventional waste collections are complicated and costly. A fleet of trucks drive along busy streets on an arbitrary schedula using inefficient routes. Wiht no data, collections are based on a lot of speculations. At any given time waste bins vary in fill levels. IoT sensors can be retrofitted to existing bins of any size and shape with ability to detect solid or liquid substances. Once installed, sensors communicate to online platform where fill levels can be monitored on visual graphs and collection routes are optimzed. By implementing smart solutions in waste management systes, pickup points are minimized so fewer vehicles are dispatched resulting in less trafic noise, congestion and CO2 emission. Optimized routes can be updated on the drivers app whenever new data is retriveved. Drivers follow the deisgnated route and empty bins that have been highlighted. With this solution, less time , less trucks and less fuel will be nedeed for the operations resolving a saving up to 80 percent. Ecube Labs mkdocs example","title":"Smart Waste Management System"},{"location":"dev_guide/","text":"AWS Architecture Setup Using the console AWS IoT Core Registering bulk devices Certification and Authenticating the devices Bulk Registiration Using AWS IoT bulk provisioning feature, device manufacturers and suppliers can simplify and automate tasks like provisioning device identities in a secure and repeatable fashion as demonstrated by the examples. While the examples here are a start, there is much more that AWS IoT Device Management offers organizations for deploying and managing large fleets of connected things. I hope you found the blog useful and informative, and I encourage you to learn more about the new features of the AWS IoT Core to help your organization make the most of these and other enabling new technologies from AWS. Within the scope of this demo application approximetlay 100 dustbins will be connected to cloud In order to make productive use of the AWS IoT Device Management bulk provisioning feature you\u2019ll need to prepare a few AWS resources prior to starting the provisioning task. Those resources include provisioning template, an S3 bucket location, a service role and a data file. Additionally, you will need to create X.509 certificates and generate certificate signing requests (CSRs). We\u2019ll go over each of those resources in greater detail next. Create Provisioning Template A provisioning template contains variables that are replaced when the template is used to provision a device. A dictionary (map) is used to provide values for the variables used in a template. The bulk provisioning task will use the JSON data file as the replacement variable values when the task is run. Create Certificates and Certificate Signing Requests (CSRs) Write a bash or python script to automatically create .crt and .key files for all objects. Create a python script to convert the key into single line string. openssl req -new -newkey rsa:2048 -nodes -keyout keys/device-one.key -out certificates/device-one.csr -subj \"/C=US/ST=WA/L=Seattle/O=MyOrg/CN=MyDept\" 3) Generate JSON data file and copy to S3 bucket With the provisioning template and CSR files created, we can now build our JSON data file. The data file must be a newline-delimited JSON file. Each line contains all of the parameter values for provisioning a single device. For this example, our data file should appear as follows: {\"ThingName\": \"device-one\", \"SerialNumber\": \"001\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-two\", \"SerialNumber\": \"002\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-three\", \"SerialNumber\": \"003\", \"CSR\": \"*** CSR FILE CONTENT ***\"} 4) Create Service Role When the provisioning task is executed, the IoT service will need to locate the data file in an S3 bucket. You can use an existing bucket or create a new one specifically for use in provisioning a device in the AWS IoT Core service. With either choice, you will need to create a role that allows AWS IoT Core to access the bucket to retrieve the data file. First Create a trust policy to provide permissions to your S3 bucket. Be sure that your bucket name is properly entered. Use the example below as a guide: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\" ], \"Resource\": [ \"arn:aws:s3:::smart-waste-management/*\" ] } ] } Attach the policy to the role. Using the SDK (python) S3 Bucket configuration IoT Core Configuration Installation Boto3 is the Amazon Web Services (AWS) Software Development Kit (SDK) for Python, which allows Python developers to write software that makes use of services like Amazon S3 and Amazon EC2. In order to configure project using python, AWS Python SDK Boto3 is needed to be installed. pip3 install boto3 Configuring the creditentials After installing boto3, next step is to set up credentials. Credentials include items aws_access_key_id, aws_secret_access_key and aws_session_token. Boto3 will look in several locations when searching for credentials. The mechanism in which Boto3 looks for credentials is to search through a list of possible locations and stop as soon as it finds credentials. The order in which Boto3 searches for credentials is: Passing credentials as parameters in the boto.client() method Passing credentials as parameters when creating a Session object Environment variables Shared credential file (~/.aws/credentials) AWS config file (~/.aws/config) Assume Role provider Boto2 config file (/etc/boto.cfg and ~/.boto) Instance metadata service on an Amazon EC2 instance that has an IAM role configured. Shared credential file The shared credentials file has a default location of ~/.aws/credentials. You can change the location of the shared credentials file by setting the AWS_SHARED_CREDENTIALS_FILE environment variable. This file is an INI formatted file with section names corresponding to profiles. With each section, the three configuration variables shown above can be specified: aws_access_key_id, aws_secret_access_key, aws_session_token. These are the only supported values in the shared credential file. Below is a minimal example of the shared credentials file: [default] aws_access_key_id = YOUR_KEY aws_secret_access_key = YOUR_SECRET aws_session_token=baz Then, set up a default region (in e.g. ~/.aws/config): [default] region=us-east-1 IAM Role Configuration In order to grant AWS IoT Core to access S3 service an IAM role needed to be created. The created IAM role must have the following policies; The created IAM role must have following policies; Allows IoT to call AWS services on your behalf. AWSIoTThingsRegistration (AWS managed policy) ( +) AmazonS3ReadOnlyAccess { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::iot-use-cases/smart-waste-management*\" } ] } S3 Bucket Configuration fsaf IoT Core Configuration Choose the parameter file from the S3 bucket in which it's stored","title":"AWS Architecture Setup"},{"location":"dev_guide/#aws-architecture-setup","text":"","title":"AWS Architecture Setup"},{"location":"dev_guide/#using-the-console","text":"","title":"Using the console"},{"location":"dev_guide/#aws-iot-core","text":"Registering bulk devices Certification and Authenticating the devices","title":"AWS IoT Core"},{"location":"dev_guide/#bulk-registiration","text":"Using AWS IoT bulk provisioning feature, device manufacturers and suppliers can simplify and automate tasks like provisioning device identities in a secure and repeatable fashion as demonstrated by the examples. While the examples here are a start, there is much more that AWS IoT Device Management offers organizations for deploying and managing large fleets of connected things. I hope you found the blog useful and informative, and I encourage you to learn more about the new features of the AWS IoT Core to help your organization make the most of these and other enabling new technologies from AWS. Within the scope of this demo application approximetlay 100 dustbins will be connected to cloud In order to make productive use of the AWS IoT Device Management bulk provisioning feature you\u2019ll need to prepare a few AWS resources prior to starting the provisioning task. Those resources include provisioning template, an S3 bucket location, a service role and a data file. Additionally, you will need to create X.509 certificates and generate certificate signing requests (CSRs). We\u2019ll go over each of those resources in greater detail next.","title":"Bulk Registiration"},{"location":"dev_guide/#create-provisioning-template","text":"A provisioning template contains variables that are replaced when the template is used to provision a device. A dictionary (map) is used to provide values for the variables used in a template. The bulk provisioning task will use the JSON data file as the replacement variable values when the task is run.","title":"Create Provisioning Template"},{"location":"dev_guide/#create-certificates-and-certificate-signing-requests-csrs","text":"Write a bash or python script to automatically create .crt and .key files for all objects. Create a python script to convert the key into single line string. openssl req -new -newkey rsa:2048 -nodes -keyout keys/device-one.key -out certificates/device-one.csr -subj \"/C=US/ST=WA/L=Seattle/O=MyOrg/CN=MyDept\"","title":"Create Certificates and Certificate Signing Requests (CSRs)"},{"location":"dev_guide/#3-generate-json-data-file-and-copy-to-s3-bucket","text":"With the provisioning template and CSR files created, we can now build our JSON data file. The data file must be a newline-delimited JSON file. Each line contains all of the parameter values for provisioning a single device. For this example, our data file should appear as follows: {\"ThingName\": \"device-one\", \"SerialNumber\": \"001\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-two\", \"SerialNumber\": \"002\", \"CSR\": \"*** CSR FILE CONTENT ***\"} {\"ThingName\": \"device-three\", \"SerialNumber\": \"003\", \"CSR\": \"*** CSR FILE CONTENT ***\"}","title":"3) Generate JSON data file and copy to S3 bucket"},{"location":"dev_guide/#4-create-service-role","text":"When the provisioning task is executed, the IoT service will need to locate the data file in an S3 bucket. You can use an existing bucket or create a new one specifically for use in provisioning a device in the AWS IoT Core service. With either choice, you will need to create a role that allows AWS IoT Core to access the bucket to retrieve the data file. First Create a trust policy to provide permissions to your S3 bucket. Be sure that your bucket name is properly entered. Use the example below as a guide: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"s3:GetObject\" ], \"Resource\": [ \"arn:aws:s3:::smart-waste-management/*\" ] } ] } Attach the policy to the role.","title":"4) Create Service Role"},{"location":"dev_guide/#using-the-sdk-python","text":"S3 Bucket configuration IoT Core Configuration","title":"Using the SDK (python)"},{"location":"dev_guide/#installation","text":"Boto3 is the Amazon Web Services (AWS) Software Development Kit (SDK) for Python, which allows Python developers to write software that makes use of services like Amazon S3 and Amazon EC2. In order to configure project using python, AWS Python SDK Boto3 is needed to be installed. pip3 install boto3","title":"Installation"},{"location":"dev_guide/#configuring-the-creditentials","text":"After installing boto3, next step is to set up credentials. Credentials include items aws_access_key_id, aws_secret_access_key and aws_session_token. Boto3 will look in several locations when searching for credentials. The mechanism in which Boto3 looks for credentials is to search through a list of possible locations and stop as soon as it finds credentials. The order in which Boto3 searches for credentials is: Passing credentials as parameters in the boto.client() method Passing credentials as parameters when creating a Session object Environment variables Shared credential file (~/.aws/credentials) AWS config file (~/.aws/config) Assume Role provider Boto2 config file (/etc/boto.cfg and ~/.boto) Instance metadata service on an Amazon EC2 instance that has an IAM role configured.","title":"Configuring the creditentials"},{"location":"dev_guide/#shared-credential-file","text":"The shared credentials file has a default location of ~/.aws/credentials. You can change the location of the shared credentials file by setting the AWS_SHARED_CREDENTIALS_FILE environment variable. This file is an INI formatted file with section names corresponding to profiles. With each section, the three configuration variables shown above can be specified: aws_access_key_id, aws_secret_access_key, aws_session_token. These are the only supported values in the shared credential file. Below is a minimal example of the shared credentials file: [default] aws_access_key_id = YOUR_KEY aws_secret_access_key = YOUR_SECRET aws_session_token=baz Then, set up a default region (in e.g. ~/.aws/config): [default] region=us-east-1","title":"Shared credential file"},{"location":"dev_guide/#iam-role-configuration","text":"In order to grant AWS IoT Core to access S3 service an IAM role needed to be created. The created IAM role must have the following policies; The created IAM role must have following policies; Allows IoT to call AWS services on your behalf. AWSIoTThingsRegistration (AWS managed policy) ( +) AmazonS3ReadOnlyAccess { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::iot-use-cases/smart-waste-management*\" } ] }","title":"IAM Role Configuration"},{"location":"dev_guide/#s3-bucket-configuration","text":"fsaf","title":"S3 Bucket Configuration"},{"location":"dev_guide/#iot-core-configuration","text":"","title":"IoT Core Configuration"},{"location":"dev_guide/#choose-the-parameter-file-from-the-s3-bucket-in-which-its-stored","text":"","title":"Choose the parameter file from the S3 bucket in which it's stored"},{"location":"introduction/","text":"Introduction The sample application for smart waste management system consists of multiple components based on cloud connectivity and visualization dashbaords. Archutecuter of the application can ben seen below.","title":"Introduction"},{"location":"introduction/#introduction","text":"The sample application for smart waste management system consists of multiple components based on cloud connectivity and visualization dashbaords. Archutecuter of the application can ben seen below.","title":"Introduction"},{"location":"ssl_guide/","text":"SSL What is SSL Secure Sockets Layer (SSL) and Transport Layer security (TLS ) are protocols that provide secure communications over a computer network or link .","title":"SSL"},{"location":"ssl_guide/#ssl","text":"","title":"SSL"},{"location":"ssl_guide/#what-is-ssl","text":"Secure Sockets Layer (SSL) and Transport Layer security (TLS ) are protocols that provide secure communications over a computer network or link .","title":"What is SSL"}]}